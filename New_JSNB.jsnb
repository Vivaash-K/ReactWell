{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Memory Pairs Game</title>\n<link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div id=\"game-container\">\n    <h1>Memory Pairs</h1>\n    <p id=\"status\">Try to find all pairs!</p>\n    <div id=\"memory-game\" class=\"memory-game\"></div>\n    <button onclick=\"startGame()\">Start New Game</button>\n  </div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
      "status": "[-]",
      "output": "<p class=\"error\">Unexpected token '&lt;'</p>",
      "type": "code"
    },
    {
      "code": "// Variables for game logic\nconst cardColors = [\n    'red', 'blue', 'green', 'orange', \n    'purple', 'yellow', 'pink', 'cyan'\n  ];\n  let cards = [...cardColors, ...cardColors]; // Duplicate colors for pairs\n  let flippedCards = [];\n  let matchedPairs = 0;\n  let moves = 0;\n  \n  // Start the game\n  function startGame() {\n    // Shuffle cards and reset state\n    shuffle(cards);\n    matchedPairs = 0;\n    moves = 0;\n    document.getElementById('status').textContent = \"Try to find all pairs!\";\n    \n    // Clear game board and create cards\n    const gameBoard = document.getElementById('memory-game');\n    gameBoard.innerHTML = '';\n    cards.forEach(color => {\n      const card = document.createElement('div');\n      card.classList.add('memory-card');\n      card.dataset.color = color;\n      card.onclick = () => flipCard(card);\n      gameBoard.appendChild(card);\n    });\n  }\n  \n  // Shuffle function\n  function shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n  \n  // Flip card logic\n  function flipCard(card) {\n    if (card.classList.contains('flip') || flippedCards.length === 2) return;\n  \n    // Flip the card\n    card.classList.add('flip');\n    card.style.backgroundColor = card.dataset.color;\n    flippedCards.push(card);\n  \n    // Check for match when two cards are flipped\n    if (flippedCards.length === 2) {\n      checkForMatch();\n    }\n  }\n  \n  // Check if two flipped cards match\n  function checkForMatch() {\n    moves++;\n    const [card1, card2] = flippedCards;\n    if (card1.dataset.color === card2.dataset.color) {\n      // Matched pair\n      matchedPairs++;\n      flippedCards = [];\n      if (matchedPairs === cardColors.length) {\n        document.getElementById('status').textContent = `You won in ${moves} moves! ðŸŽ‰`;\n      }\n    } else {\n      // Not a match: flip back after a short delay\n      setTimeout(() => {\n        card1.classList.remove('flip');\n        card2.classList.remove('flip');\n        card1.style.backgroundColor = '#2e8b57';\n        card2.style.backgroundColor = '#2e8b57';\n        flippedCards = [];\n      }, 800);\n    }\n  }\n  ",
      "status": "[1]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "* {\n    box-sizing: border-box;\n  }\n  \n  body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    background-color: #de770f; /* fallback color */\n    background-image: url('SpringBG.jpeg'); /* Path to your background image */\n    background-size: cover; /* Ensures the image covers the entire background */\n    background-position: center; /* Centers the image */\n    background-attachment: fixed; /* Keeps the background fixed during scroll */\n  }  \n  \n  #game-container {\n    text-align: center;\n    background-image: url('SpringBG.jpeg'); /* Path to your background image */\n    background-size: cover; /* Ensures the image covers the entire background */\n    background-position: center; /* Centers the image */\n    padding: 20px; /* Optional, to ensure the content is not too close to the edges */\n    border-radius: 10px; /* Optional, for rounded corners */\n  }  \n  \n  .memory-game {\n    display: grid;\n    grid-template-columns: repeat(4, 100px);\n    grid-gap: 10px;\n    margin: 20px auto;\n  }\n  \n  .memory-card {\n    width: 100px;\n    height: 100px;\n    background-color: #2e8b57;\n    border-radius: 8px;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 30px;\n    color: white;\n  }\n  \n  .memory-card.flip {\n    background-color: white;\n    color: #2e8b57;\n  }\n  ",
      "status": "[-]",
      "output": "<p class=\"error\">Unexpected token '*'</p>",
      "type": "code"
    },
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Guided Relaxation Mode</title>\n    <style>\n        /* Basic style for the map */\n        #map {\n            width: 99vw;\n            height: 99vh;\n            background-image: url('BotanistOrangerie.jpeg'); /* Replace with your map image path */\n            background-size: contain;\n            background-position: center;\n            background-repeat: no-repeat;\n        }\n        .plant-button {\n            position: absolute;\n            width: 125px;\n            height: 125px;\n            background-size: cover;\n            cursor: pointer;\n            border: 2px solid #11ff01;\n            border-radius: 8px;\n            background-color: transparent;\n        }\n        #random-image-button {\n            position: absolute;\n            bottom: 41%;\n            right: 74%;\n            width: 125px;\n            height: 125px;\n            background-size: cover;\n            cursor: pointer;\n            border: 3px solid #ff8c00;\n            border-radius: 12px;\n            background-color: transparent;\n        }\n    </style>\n</head>\n<body>\n\n<div id=\"map\">\n    <!-- Plant buttons on four points on the map -->\n    <button class=\"plant-button\" id=\"plant1\" style=\"top: 12%; left: 36%;\"></button>\n    <button class=\"plant-button\" id=\"plant2\" style=\"top: 12%; right: 27%;\"></button>\n    <button class=\"plant-button\" id=\"plant3\" style=\"bottom: 10%; left: 36%;\"></button>\n    <button class=\"plant-button\" id=\"plant4\" style=\"bottom: 10%; right: 27%;\"></button>\n    \n    <!-- Random image button -->\n    <button id=\"random-image-button\"></button>\n</div>\n\n<button id=\"start-relax-mode\">Start Relax Mode</button>\n<audio id=\"background-music\" loop>\n    <source src=\"inspirational-nature-230319.mp3\" type=\"audio/mpeg\">\n</audio>\n\n<script>\n    /* Background music\n    const backgroundMusic = document.getElementById('background-music');\n    backgroundMusic.volume = 0.5; // Adjust volume if needed\n    backgroundMusic.play();\n    */\n\n    document.getElementById('start-relax-mode').addEventListener('click', () => {\n    const backgroundMusic = document.getElementById('background-music');\n    backgroundMusic.volume = 0.5; // Adjust volume if needed\n    backgroundMusic.play().catch(error => {\n        console.log(\"Audio playback failed:\", error);\n    });\n    document.getElementById('start-relax-mode').style.display = 'none';\n});\n\n\n    // Plant buttons cycling through images\n    const plantImages = [\n        ['p1i1.JPG', 'p1i2.JPG', 'p1i3.JPG', 'p1i4.JPG'],\n        ['p2i1.JPG', 'p2i2.JPG', 'p2i3.JPG', 'p2i4.JPG'],\n        ['p3i1.JPG', 'p3i2.JPG', 'p3i3.JPG', 'p3i4.JPG'],\n        ['p4i1.JPG', 'p4i2.JPG', 'p4i3.JPG', 'p4i4.JPG']\n    ];\n\n    const plantButtons = [\n        document.getElementById('plant1'),\n        document.getElementById('plant2'),\n        document.getElementById('plant3'),\n        document.getElementById('plant4')\n    ];\n\n    let plantIndices = [0, 0, 0, 0];\n\n    plantButtons.forEach((button, index) => {\n        button.style.backgroundImage = `url(${plantImages[index][0]})`;\n        button.addEventListener('click', () => {\n            plantIndices[index] = (plantIndices[index] + 1) % plantImages[index].length;\n            button.style.backgroundImage = `url(${plantImages[index][plantIndices[index]]})`;\n        });\n    });\n\n    // Random image button cycling through 9 images\n    const randomImages = [\n        'Rando1.JPG', 'Rando4.JPG', 'Rando7.JPG',\n        'Rando2.JPG', 'Rando5.JPG', 'Rando8.JPG',\n        'Rando3.JPG', 'Rando6.JPG', 'Rando9.JPG'\n    ];\n    const randomButton = document.getElementById('random-image-button');\n\n    function setRandomImage() {\n        const randomIndex = Math.floor(Math.random() * randomImages.length);\n        randomButton.style.backgroundImage = `url(${randomImages[randomIndex]})`;\n    }\n\n    // Initial random image\n    setRandomImage();\n    \n    // Change to a new random image on click\n    randomButton.addEventListener('click', setRandomImage);\n</script>\n\n</body>\n</html>\n",
      "status": "[-]",
      "output": "<p class=\"error\">Unexpected token '&lt;'</p>",
      "type": "code"
    },
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Whack-a-Mole Style Game</title>\n</head>\n<body>\n\n<button id=\"startButton\">Start Game</button>\n<canvas id=\"whackCanvas\" width=\"600\" height=\"400\"></canvas>\n\n<script>\nconst canvas = document.getElementById(\"whackCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\n// Load background image\nconst backgroundImage = new Image();\nbackgroundImage.src = \"backgroundmole.avif\"; // Replace with the path to your background image\n\n// Load flower image for the \"mole\"\nconst flowerImage = new Image();\nflowerImage.src = \"mole.png\"; // Replace with the path to your flower or mole image\n\nlet flowers = [];\nlet score = 0;\nlet gameInterval, flowerInterval;\n\n// Function to spawn a new flower at a random location\nfunction spawnFlower() {\n  const flower = {\n    x: Math.random() * (canvas.width - 40),\n    y: Math.random() * (canvas.height - 40),\n    size: 60,\n    timeout: Date.now() + 2000 // Each flower lasts 2 seconds\n  };\n  flowers.push(flower);\n}\n\n// Function to draw background and flowers\nfunction drawFlowers() {\n  // Draw the background image\n  if (backgroundImage.complete) {\n    ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  }\n\n  // Display the score\n  ctx.font = \"20px Arial\";\n  ctx.fillStyle = \"black\";\n  ctx.fillText(\"Score: \" + score, 10, 20);\n\n  // Remove expired flowers and draw each flower\n  const now = Date.now();\n  flowers = flowers.filter(flower => now < flower.timeout);\n\n  flowers.forEach(flower => {\n    if (flowerImage.complete) {\n      ctx.drawImage(flowerImage, flower.x - flower.size / 2, flower.y - flower.size / 2, flower.size, flower.size);\n    }\n  });\n}\n\n// Function to check if a flower was hit\nfunction checkHit(x, y) {\n  flowers.forEach((flower, index) => {\n    const distance = Math.sqrt((x - flower.x) ** 2 + (y - flower.y) ** 2);\n    if (distance < flower.size / 2) { // Adjust for flower size\n      flowers.splice(index, 1); // Remove flower if hit\n      score += 1;\n    }\n  });\n}\n\n// Add click event listener for hitting flowers\ncanvas.addEventListener(\"click\", (event) => {\n  const rect = canvas.getBoundingClientRect();\n  const x = event.clientX - rect.left;\n  const y = event.clientY - rect.top;\n  checkHit(x, y);\n});\n\n// Function to start the game\nfunction startWhackGame() {\n  score = 0;\n  flowers = [];\n  gameInterval = setInterval(drawFlowers, 100);\n  flowerInterval = setInterval(spawnFlower, 1000);\n  setTimeout(stopWhackGame, 30000); // Game lasts 30 seconds\n}\n\n// Function to stop the game after 30 seconds\nfunction stopWhackGame() {\n  clearInterval(gameInterval);\n  clearInterval(flowerInterval);\n  alert(\"Game over! Final score: \" + score);\n}\n\n// Add event listener to start button\ndocument.getElementById(\"startButton\").addEventListener(\"click\", () => {\n  startWhackGame();\n});\n</script>\n\n</body>\n</html>\n",
      "status": "[-]",
      "output": "<p class=\"error\">Unexpected token '&lt;'</p>",
      "type": "code"
    },
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Word Association Game</title>\n</head>\n<body>\n<canvas id=\"wordCanvas\" width=\"600\" height=\"400\"></canvas>\n<script>\nconst canvas2 = document.getElementById(\"wordCanvas\");\nconst ctx2 = canvas2.getContext(\"2d\");\n\n// Background image for the canvas\nconst background = new Image();\nbackground.src = \"background3.avif\"; // Replace with the path to your background image\n\n// Define objects with image paths instead of colors\nlet objects = [\n  { name: \" \", word: \"Water\", x: 50, y: 200, width: 80, height: 80, imageSrc: \"water.avif\" },\n  { name: \" \", word: \"Sun\", x: 150, y: 200, width: 80, height: 80, imageSrc: \"sun2.avif\" },\n  { name: \" \", word: \"Tree\", x: 250, y: 200, width: 80, height: 80, imageSrc: \"tree.avif\" },\n  { name: \" \", word: \"Flower\", x: 350, y: 200, width: 80, height: 80, imageSrc: \"flower.avif\" },\n  { name: \" \", word: \"Rain\", x: 450, y: 200, width: 80, height: 80, imageSrc: \"rain.avif\" },\n  { name: \" \", word: \"Garden\", x: 50, y: 300, width: 80, height: 80, imageSrc: \"garden2.avif\" },\n  { name: \" \", word: \"Bird\", x: 150, y: 300, width: 80, height: 80, imageSrc: \"bird.avif\" },\n  { name: \" \", word: \"Butterfly\", x: 250, y: 300, width: 80, height: 80, imageSrc: \"butterfly.avif\" },\n  { name: \" \", word: \"Bees\", x: 350, y: 300, width: 80, height: 80, imageSrc: \"bee.avif\" },\n  { name: \" \", word: \"Fountain\", x: 450, y: 300, width: 80, height: 80, imageSrc: \"fountain.avif\" }\n];\n\n// Initialize variables\nlet currentWord;\nlet score2 = 0;\nlet gameActive2 = true;\n\n// Load images for each object\nfunction loadImages() {\n  objects.forEach(obj => {\n    obj.image = new Image();\n    obj.image.src = obj.imageSrc;\n  });\n}\n\n// Draw the objects on the canvas\nfunction drawObjects() {\n  ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n\n  // Draw the background image\n  if (background.complete) {\n    ctx2.drawImage(background, 0, 0, canvas2.width, canvas2.height);\n  }\n\n  // Draw score and prompt text\n  ctx2.font = \"24px Arial\";\n  ctx2.fillStyle = \"grey\";\n  ctx2.fillText(`Score: ${score2}`, 10, 30);\n\n  if (gameActive2) {\n    ctx2.fillText(`Match the word: ${currentWord}`, 200, 50);\n\n    // Draw each object with its image and label\n    objects.forEach(obj => {\n      if (obj.image.complete) {\n        ctx2.drawImage(obj.image, obj.x, obj.y, obj.width, obj.height);\n      }\n      ctx2.fillStyle = \"black\";\n      ctx2.fillText(obj.name, obj.x, obj.y + obj.height + 20);\n    });\n  } else {\n    ctx2.fillText(\"Game Over!\", 250, 150);\n    ctx2.fillText(`Final Score: ${score2}`, 250, 200);\n  }\n}\n\n// Generate a random word to match\nfunction generateWord() {\n  const randomObject = objects[Math.floor(Math.random() * objects.length)];\n  return randomObject.word;\n}\n\n// Start the game\nfunction startWordGame() {\n  score2 = 0;\n  gameActive2 = true;\n  currentWord = generateWord();\n  drawObjects();\n}\n\n// Check if the selected object matches the word\nfunction checkSelection(x, y) {\n  if (!gameActive2) return;\n\n  const selectedObject = objects.find(\n    obj => x > obj.x && x < obj.x + obj.width && y > obj.y && y < obj.y + obj.height\n  );\n\n  if (selectedObject && selectedObject.word === currentWord) {\n    score2 += 1;\n    currentWord = generateWord();\n  } else if (selectedObject) {\n    gameActive2 = false;\n  }\n  drawObjects();\n}\n\n// Event listener for mouse clicks on canvas\ncanvas2.addEventListener(\"click\", (event) => {\n  const rect = canvas2.getBoundingClientRect();\n  const x = event.clientX - rect.left;\n  const y = event.clientY - rect.top;\n  checkSelection(x, y);\n});\n\n// Load images and start game\nloadImages();\nbackground.onload = startWordGame; // Start the game after the background loads\n\n</script>\n</body>\n</html>\n",
      "status": "[-]",
      "output": "<p class=\"error\">Unexpected token '&lt;'</p>",
      "type": "code"
    },
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Stylish Homepage</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <header>\n        <h1 style=\"color: rgb(112, 18, 112);\">Welcome to ReactWell</h1>\n        <p style=\"color: rgb(112, 18, 112);\">Your personal wellness support center.</p>\n    </header>\n    \n    <main>\n        <section class=\"page-preview\">\n            <a href=\"match.vscode/matchy.html\" class=\"preview-link\">\n                <h2>The Memory Game</h2>\n                <p>Sharpen Your Mind, Match to Win!</p>\n            </a>\n        </section>\n        \n        <section class=\"page-preview\">\n            <a href=\"RelaxMode.vscode/Relaxx.html\" class=\"preview-link\">\n                <h2>Gardens Galleria</h2>\n                <p>Escape, Unwind, and Grow in Your Own Tranquil Oasis.</p>\n            </a>\n        </section>\n        \n        <section class=\"page-preview\">\n            <a href=\"whake-a-mole/WHAKE-A-MOLE/index1.html\" class=\"preview-link\">\n                <h2>Whack-a-Mole</h2>\n                <p>Smash, Score, and Have Fun in the Ultimate Challenge!</p>\n            </a>\n        </section>\n        \n        <section class=\"page-preview\">\n            <a href=\"WORD PUZZLE/index2.html\" class=\"preview-link\">\n                <h2>Word-Association</h2>\n                <p>Connect, Create, and Challenge Your Mind!</p>\n            </a>\n        </section>\n    </main>\n</body>\n</html>\n",
      "status": "[-]",
      "output": "<p class=\"error\">Unexpected token '&lt;'</p>",
      "type": "code"
    },
    {
      "code": "/* General Body Styles */\nbody {\n    font-family: 'Arial', sans-serif;\n    background-image: url('data/index_back.jpeg');\n    background-size: cover;      /* Ensures the image covers the whole page */\n    background-position: center; /* Centers the image */\n    background-repeat: no-repeat; /* Prevents the image from repeating */\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    color: #f4f4f4;\n}\n\n/* Header Styles */\nheader {\n    text-align: center;\n    margin: 20px;\n    padding: 10px;\n}\n\nheader h1 {\n    font-size: 2.5em;\n    margin-bottom: 10px;\n    color: #f7f7f7;\n    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);\n}\n\nheader p {\n    font-size: 1.2em;\n    color: #dcdcdc;\n}\n\n/* Main Layout */\nmain {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 20px;\n    width: 90%;\n    padding: 20px;\n    max-width: 1200px;\n}\n\n/* Page Preview Cards */\n.page-preview {\n    background: #ffffff;\n    border-radius: 12px;\n    padding: 20px;\n    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    overflow: hidden;\n}\n\n.page-preview:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 15px 25px rgba(0, 0, 0, 0.3);\n}\n\n/* Links and Text Styling */\n.preview-link {\n    text-decoration: none;\n    color: #333;\n}\n\n.preview-link h2 {\n    font-size: 1.5em;\n    color: #2a5298;\n    margin: 0;\n    transition: color 0.3s ease;\n}\n\n.preview-link p {\n    margin: 10px 0 0;\n    color: #666;\n}\n\n.page-preview:hover .preview-link h2 {\n    color: #1e3c72;\n}\n\n/* Responsive Styles */\n@media (max-width: 768px) {\n    header h1 {\n        font-size: 2em;\n    }\n    header p {\n        font-size: 1em;\n    }\n    .page-preview {\n        padding: 15px;\n    }\n}\n",
      "status": "[-]",
      "output": "<p class=\"error\">Unexpected token '{'</p>",
      "type": "code"
    },
    {
      "code": "",
      "status": "",
      "output": "",
      "type": "html"
    },
    {
      "code": "",
      "status": "",
      "output": "",
      "type": "html"
    },
    {
      "code": "<style>\n\n</style>",
      "status": "",
      "output": "<style>\n\n</style>",
      "type": ""
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}